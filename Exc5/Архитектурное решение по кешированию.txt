Кэширование

========================
Основные проблемы:
========================

- Низкая скорость работы MES: Операторы жалуются на долгую загрузку страницы с заказами
- Задержки в выполнении заказов: Клиенты недовольны временем обработки заказов

Наиболее критичные части системы для кеширования:
- Список заказов в MES: Часто запрашивается операторами, но данные изменяются нечасто
- Расчёт стоимости заказа в MES: Требует значительных вычислительных ресурсов, результаты для типовых заказов (стандартных) могут быть закешированы
или храниться в виде отдельных списков/таблиц без необходимости вычисления стоимости или клиент делает повторный заказ/аналогичный другому уже выполненному заказу
- Статусы заказов: Часто запрашиваются клиентами и операторами, но изменяются редко

========================
Мотивация
========================

Зачем нужно кеширование:
- Ускорение работы MES: Кеширование снизит нагрузку на базу данных и ускорит загрузку страниц
- Снижение времени выполнения заказов: Кеширование результатов расчёта стоимости уменьшит задержки для клиентов
- Улучшение пользовательского опыта: Быстрый доступ к данным повысит удовлетворённость клиентов и операторов

Элементы системы для кеширования:

- Список заказов в MES
- Результаты расчёта стоимости заказа
- Статусы заказов

========================
Предлагаемое решение
========================
Тип кеширования:

Серверное кеширование: Данные кешируются на стороне сервера, что позволяет снизить нагрузку на базу данных и ускорить обработку запросов, так же по причине того что клиентов много, обычные пользователи, другие заказчики, и они могут работать с одними и теми же сущностями, делать кэш на стороне клиента - дублировать объекты/данные, на мой взгляд лучше это делать на стороне сервера

Паттерн кеширования:
Cache-Aside:
Почему: Данные загружаются в кеш только при запросе, что позволяет минимизировать использование памяти, наиболее простой и распространненный способ

Почему не другие:
Write-Through: Требует синхронной записи в кеш и базу данных, что увеличивает задержки
Refresh-Ahead: Требует предварительного обновления данных, что может привести к избыточному использованию ресурсов

Так же можно предположить что операций на чтение намного больше: запросы статуса, запросы уже рассчитаной стоимости заказов, большое кол-во пользователей кто работает с этими данными (юзеры/администраторы/сторонние заказчики)
операции на запись: создание закаказа, изменение его статусов, записи результата расчета стоимости заказа

========================
Стратегия инвалидации кеша:
========================
подойдут 2 стратегии: временная и инвалидация, основанная на запросах: кеш инвалидируется каждый раз, когда приходит запрос на обновление данных
Например: Пользователь оформил и оплатил заказ. После успешной оплаты система может выполнить инвалидацию кеша страницы заказа, чтобы пользователю предоставили актуальную информацию о статусе его заказа

Почему: Подходит для данных, которые изменяются нечасто (например, статусы заказов)

Почему не другие:

Инвалидация по ключу: Требует отслеживания изменений, что сложно реализовать для списка заказов
Программная инвалидация: Требует изменения кода для управления кешем, что увеличивает сложность

так же нет необходимости в реал-тайм отслеживании данных (например как в ленте с комментариями)


========================
Диаграмма последовательности
========================
выполнена на plantumYMK
plantuml
Copy
@startuml
actor Оператор
participant "MES (Frontend)" as MES_Frontend
participant "MES (Backend)" as MES_Backend
participant "Кеш (Redis)" as Cache
participant "База данных" as DB

Оператор -> MES_Frontend: Запрос списка заказов
MES_Frontend -> MES_Backend: Передача запроса
MES_Backend -> Cache: Проверка наличия данных в кеше
alt Данные в кеше
    Cache --> MES_Backend: Возврат данных из кеша
else Данных нет в кеше
    MES_Backend -> DB: Запрос данных из базы
    DB --> MES_Backend: Возврат данных
    MES_Backend -> Cache: Сохранение данных в кеше
    Cache --> MES_Backend: Подтверждение сохранения
end
MES_Backend --> MES_Frontend: Возврат данных
MES_Frontend --> Оператор: Отображение списка заказов

Оператор -> MES_Frontend: Изменение статуса заказа
MES_Frontend -> MES_Backend: Передача запроса
MES_Backend -> DB: Обновление статуса в базе данных
DB --> MES_Backend: Подтверждение обновления
MES_Backend -> Cache: Инвалидация кеша
Cache --> MES_Backend: Подтверждение инвалидации
MES_Backend --> MES_Frontend: Подтверждение изменения статуса
MES_Frontend --> Оператор: Отображение обновлённого статуса
@enduml

========================
Стратегия инвалидации кеша
========================
Сравнительный анализ стратегий инвалидации:

1. Временная инвалидация	
Лучше подходит, потому что:
- Простота реализации
- Минимальные изменения кода


Есть особенности:	
- Данные обновляются через фиксированный интервал
- Подходит для данных, которые изменяются нечасто.

2. Инвалидация по ключу
Позволяет сделать:
- Точное управление кешем
- Оптимизация использования памяти

Есть особенности:	
- Требует отслеживания изменений
- Подходит для данных с частыми изменениями

3. Программная инвалидация
Не позволяет сделать:

- Сложность реализации
- Требует изменения кода

Есть особенности:
- требует управления кешем в коде
- подходит для сложных сценариев


Выбор:
Временная инвалидация: Подходит для статусов заказов и списка заказов, так как эти данные изменяются нечасто, а так же потому что наиболее простая в реализации
