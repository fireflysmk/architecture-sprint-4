Анализ текущей архитектуры и проблем

=================================
1. Идентификация проблемных мест
=================================

1.1 Проблемы с производительностью MES:
- Долгая загрузка первой страницы MES (дашборд с заказами)
- Задержки в расчёте стоимости заказа (до 30 минут для сложных моделей)

1.2 Проблемы с отображением заказов в реальном времени, что критично для операторов

1.3 Проблемы с масштабируемостью:
- Линейный рост нагрузки всего на 100 заказов в месяц вызывает проблемы с обработкой заказов
- Открытие API для сторонних продавцов, без каких-либо механизмов "отсечек" по нагрузке, что усугубило проблемы с производительностью.

1.4 Проблемы с интеграцией между системами:
- Задержки в передаче данных между системами приводят к несвоевременному обновлению статусов заказов.

1.5 Проблемы с процессами разработки и тестирования:
- Ручное тестирование QA-инженером приводит к задержкам релизов
- Отсутствие автоматизированного тестирования 
- Задержки в релизах из-за багов уровня high/highest
- ручной деплой и релиз могут приводить к ошибкам во время установок новых версий

1.6 Проблемы с инфраструктурой:
- Использование одного инстанса базы данных для записи и чтения может быть узким местом
- по той же причине нет репликации, риск утери данных, недоступности бд под нагрузкой

1.7 Отсутствие масштабируемости инфраструктуры под нагрузку

1.8 Проблемы с пользовательским опытом (как следствие проблем описанных выше): 
- Клиенты жалуются на задержки в выполнении заказов
- Пользователи API не получают свои заказы вовремя

1.9 Проблемы с наблюдаемостью:
- нет системы мониторинга ресурсов и бизнес-метрик, не реализована в полной мере нормальная система логгирования
- отсутствует система трейсинга

====================================
2. Инициативы для устранения проблем
====================================

2.1 Оптимизация производительности MES:
- Внедрение кэширования для ускорения загрузки дашборда
- Оптимизация запросов к базе данных (индексы, денормализация)
- Внедрение пагинации и фильтрации на стороне сервера

2.2 Масштабирование системы:
- Внедрение горизонтального масштабирования для MES и CRM (например добавить реплик для отдельных модулей)

2.3 Репликация
- Разделение базы данных на чтение и запись, создание кластера БД, с дополнительными репликами

2.4 отказоустойчивость
- внедрение паттерна Saga (добавляем корректные шаги по откату в случае ошибок(заказ не создан/нет ресурсов и тд) или дорабатываем текущие шаги)
- добавление реплик (связан с п2.2)
- внедрение защитных механизмов при превышении допустимых нагрузок, например Circuit Breaker

2.5 наблюдаемость
- улучшение мониторинга и логирования для быстрого выявления проблем
- добавление трассировки

2.6 Автоматизация процессов разработки и тестирования
- Внедрение автоматизированного тестирования (E2E, интеграционные тесты)
- Настройка CI/CD для release и prod окружений

2.7 Улучшение пользовательского опыта:
- Внедрение уведомлений для клиентов о статусе заказа
- Улучшение API для сторонних продавцов (документация, лимиты запросов, в заказах прописать допустимые лимиты запросов)


====================================
3. Приоритизация инициатив
====================================

Приоритеты расставляются на основе критичности проблем и их влияния на бизнес:

3.1 Настройка и создание системы мониторинга и трейсинга
Это следует сделать в первую очередь, т.к. именно здесь будет виден результат от последующих изменений

3.2 Оптимизация производительности MES
Это самая критичная проблема, так как она напрямую влияет на операторов и клиентов
Без решения этой проблемы невозможно эффективно масштабировать систему

3.3 отказоустойчивость, снизим кол-во ошибок 
сюда входит масштабирование, отказоустойчивость, репликация

3.4 Автоматизация процессов разработки и тестирования
Ускорение релизов и уменьшение задержек позволит быстрее внедрять улучшения, автоматизация тестирования снизит количество багов, попадающих в продакшн.

3.5 улучшение пользовательского опыта


====================================
4. Ответы на вопросы
====================================

4.1 Какой вы видите целевую архитектуру через полгода?

Через полгода целевая архитектура должна включать:
- Оптимизированную и масштабируемую MES с кэшированием и горизонтальным масштабированием
- Автоматизированные процессы разработки и тестирования с CI/CD для всех окружений
- Разделение базы данных на чтение и запись, использование очередей задач для обработки заказов и реализация откатов изменений для каждого шага
- логирование, трейсинг, сбор всех критичных метрик, визуальное отображение в дашбордах администраторов

4.2 Если бы у вас была возможность выполнить только три пункта из списка инициатив в ближайшие полгода, что бы вы выбрали и почему?

- Настройка и создание системы мониторинга и трейсинга
то следует сделать в первую очередь, т.к. именно здесь будет виден результат от последующих изменений, дальнейшие изменения будет трудно отслеживать без корректного мониторинга и трейсинга

- Оптимизация производительности MES:
Это самая критичная проблема, которая напрямую влияет на клиентов и операторов.
Без решения этой проблемы невозможно эффективно масштабировать систему

- отказоустойчивость (добавление кластеризации, Circuit Breaker, saga) - снизим/уберем ошибки и потери заказов