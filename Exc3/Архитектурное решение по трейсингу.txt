
Система компании состоит из трёх основных компонентов:

Онлайн-магазин (Vue + Java Spring Boot)
CRM (Vue + Java Spring Boot)
MES (React + C#)

Интеграция между CRM и MES осуществляется через RabbitMQ Заказы проходят через несколько этапов, начиная с создания в онлайн-магазине и заканчивая производством и доставкой 
Проблемы с заказами могут возникать на любом из этапов, особенно в местах интеграции между системами, трейсинг обычно туда и добавляют - в места интеграций, чтобы понять на каком шаге завис запрос или возникла другая проблема

============================
Системы для трейсинга
============================
Трейсингом необходимо покрыть следующие системы и этапы:

Онлайн-магазин:
- Создание заказа (INITIATED)
- Загрузка файла (FILE_UPLOADED)
- Подтверждение заказа (SUBMITTED)

CRM:
-Подтверждение заказа (MANUFACTURING_APPROVED)
-Закрытие заказа (CLOSED)

MES:
- Расчёт стоимости (PRICE_CALCULATED)
- Начало производства (MANUFACTURING_STARTED)
- Завершение производства (MANUFACTURING_COMPLETED)
- Упаковка (PACKAGING)
- Отправка (SHIPPED)

RabbitMQ:
- Передача сообщений между CRM и MES

============================
Данные для трейсинга
============================
Список данных, которые должны попадать в трейсинг:
- ID заказа (уникальный идентификатор)
- Текущий статус заказа
- Временные метки (timestamp) для каждого этапа
- Идентификатор пользователя (если применимо)
- Идентификатор сообщения в RabbitMQ
- Ошибки

============================
Мотивация
============================

- Выявление узких мест: Трейсинг позволит определить, на каком этапе заказы зависают или теряются
- Улучшение прозрачности: Команда сможет видеть полный путь заказа, что упростит диагностику проблем
- Снижение времени обработки заказов: Быстрое выявление проблем позволит ускорить выполнение заказов
- Улучшение пользовательского опыта: Клиенты будут получать более точную информацию о статусе заказа

Технические и бизнес-метрики:
- Среднее время обработки заказа
- Количество заказов, зависших на каждом этапе
- Количество потерянных сообщений в RabbitMQ
- Среднее время выполнения каждого этапа
- Удовлетворённость клиентов (CSAT)

============================
Предлагаемое решение
============================

https://drive.google.com/file/d/1WGvDWBhx6tiLiYxa2WkAhgX7LoJnBjgp/view?usp=drive_link

https://app.diagrams.net/#G1WGvDWBhx6tiLiYxa2WkAhgX7LoJnBjgp#%7B%22pageId%22%3A%22q5gKrhV2WKv8pvfnoQvh%22%7D

Технологии:
- OpenTelemetry для сбора, обработки и экспорта телеметрических данных(метрик, трассировок и журналов) из распределённых систем
- Jaeger для визуализации трассировок 
- RabbitMQ Tracing Plugin для отслеживания сообщений

Компоненты:
Добавление OpenTelemetry в онлайн-магазин, CRM и MES

Интеграция с RabbitMQ:
Включение RabbitMQ Tracing Plugin для отслеживания сообщений

Хранение и визуализация:
Использование Jaeger для хранения и визуализации трейсов

Алертинг:
Интеграция Jaeger с Alertmanager для уведомлений о проблемах

Обновлённая диаграмма:
Добавлены компоненты Jaeger и OpenTelemetry

Добавлены связи между Jaeger и всеми системами (онлайн-магазин, CRM, MES, RabbitMQ)

============================
Компромиссы
============================

Трейсинг может добавить нагрузку на систему, особенно при высокой частоте запросов, 
изменение кода требует времени и усилий, некоторые системы могут не поддерживать OpenTelemetry, что потребует доработок
т.е. где-то можно будет обойтись только логами и мониторингом

============================
Аспекты безопасности
============================
Аутентификация и авторизация:

- Доступ к Jaeger только для сотрудников с ролью «Поддержка»
Шифрование данных:
- Использование TLS для передачи данных между системами

Логирование и аудит
- Ведение логов доступа к Jaeger

Ограничение доступа:
- Jaeger доступен только из внутренней сети компании
